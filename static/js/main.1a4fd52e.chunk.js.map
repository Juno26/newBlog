{"version":3,"sources":["App.tsx","reportWebVitals.js","index.js","audio/sound_school_bell_start.mp3","audio/sound_school_bell_end.mp3"],"names":["App","_useState","useState","Date","_useState2","_slicedToArray","time","setTime","_useState3","start","end","_useState4","bellTimes","setBellTimes","_useState5","_useState6","isStarted","setIsStarted","timeRegExp","useEffect","setTimeout","forEach","e","getHours","getMinutes","getSeconds","Audio","soundStart","play","catch","console","error","soundEnd","AddTimeButton","_ref","soundType","React","onClick","input","prompt","test","_bellTimes","_objectSpread","push","split","map","Number","sort","a","b","alert","TimeText","_ref2","result","i","key","index","splice","concat","toString","padStart","id","className","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","createElement","StrictMode","module","exports","p"],"mappings":"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","file":"static/js/main.1a4fd52e.chunk.js","sourcesContent":["import * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport './App.css';\n\nimport soundStart from './audio/sound_school_bell_start.mp3';\nimport soundEnd from './audio/sound_school_bell_end.mp3';\n\ntype bellTimesProps = [\n  bellTimes: { 'start': number[][], 'end': number[][] },\n  setBellTimes: React.Dispatch<React.SetStateAction<{ 'start': number[][], 'end': number[][] }>>\n];\n\ntype TimeElementProps = {\n  soundType: 'start' | 'end'\n};\n\nfunction App() {\n  const [time, setTime] = useState(new Date());\n  const [bellTimes, setBellTimes]: bellTimesProps = useState({ 'start': [[8, 40, 0]], 'end': [[16, 37, 0]] });\n  const [isStarted, setIsStarted] = useState(false);\n\n  const timeRegExp = /\\d\\d\\:\\d\\d\\:\\d\\d/g;\n\n  useEffect(() => {\n    setTimeout(() => {\n      setTime(new Date());\n    }, 1000);\n\n    bellTimes.start.forEach(e => {\n      if (time.getHours() == e[0] && time.getMinutes() == e[1] && time.getSeconds() == e[2]) {\n        setIsStarted(true);\n        new Audio(soundStart).play().catch(e => console.error(e));\n      }\n    });\n\n    bellTimes.end.forEach(e => {\n      if (time.getHours() == e[0] && time.getMinutes() == e[1] && time.getSeconds() == e[2]) {\n        setIsStarted(false);\n        new Audio(soundEnd).play().catch(e => console.error(e));\n      }\n    });\n  }, [time]);\n\n  const AddTimeButton = ({ soundType }: TimeElementProps) => {\n    function onClick() {\n      let input = prompt('HH:MM:SS 형식으로 시각을 적어주세요.');\n      if (input != null) {\n        if (timeRegExp.test(input)) {\n          let _bellTimes = {...bellTimes};\n          _bellTimes[soundType].push(input.split(':').map(e => Number(e)));\n          _bellTimes[soundType].sort((a, b) => {\n            if (a[0] == b[0]) {\n              if (a[1] == b[1]) {\n                return a[2] - b[2];\n              } else {\n                return a[1] - b[1];\n              }\n            } else {\n              return a[0] - b[0];\n            }\n          });\n          setBellTimes(_bellTimes);\n        } else {\n          alert('정확한 형식으로 입력해주세요!');\n        }\n      }\n    }\n  \n    return (\n      <button onClick={onClick}> {soundType == 'start'? '시작': '종료'} 시간 추가하기 </button>\n    );\n  }\n\n  const TimeText = ({ soundType }: TimeElementProps) => {\n    const onClick = (index: number) => {\n      const input = prompt('HH:MM:SS 형식으로 수정할 시각을 입력해주세요.\\nX를 입력하면 삭제합니다.');\n      if (input != null) {\n        if (input == 'X') {\n          let _bellTimes = {...bellTimes};\n          _bellTimes[soundType].splice(index, 1);\n          setBellTimes(_bellTimes);\n        } else if (timeRegExp.test(input)) {\n          let _bellTimes = {...bellTimes};\n          _bellTimes[soundType][index] = input.split(':').map(e => Number(e));\n          _bellTimes[soundType].sort((a, b) => {\n            if (a[0] == b[0]) {\n              if (a[1] == b[1]) {\n                return a[2] - b[2];\n              } else {\n                return a[1] - b[1];\n              }\n            } else {\n              return a[0] - b[0];\n            }\n          });\n          setBellTimes(_bellTimes);\n        } else {\n          alert('정확한 형식으로 입력해주세요!');\n        }\n      }\n    }\n    let result = bellTimes[soundType].map((e, i) => <li key={i} onClick={() => onClick(i)}>{`${e[0].toString().padStart(2, '0')}시 ${e[1].toString().padStart(2, '0')}분 ${e[2].toString().padStart(2, '0')}초`}</li>);\n    return (\n      <>\n        {soundType == 'start'? '시작': '종료'} 종이 울리는 시간\n        <ul>\n          {result}\n        </ul>\n      </>\n    )\n  }\n\n  return (\n    <center>\n      <h1>학교종</h1>\n      <span id={isStarted? 'start' : 'end'}>\n        현재 시간\n        <h1>{time.getHours().toString().padStart(2, '0')}:{time.getMinutes().toString().padStart(2, '0')}:{time.getSeconds().toString().padStart(2, '0')}</h1>\n      </span><br />\n      <div className=\"time-table\">\n        <div className=\"start-table\">\n          <AddTimeButton soundType='start'/><br /><br />\n          <TimeText soundType='start'/>\n        </div>\n        <div className=\"end-table\">\n          <AddTimeButton soundType='end'/><br /><br />\n          <TimeText soundType='end'/>\n        </div>\n      </div>\n    </center>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports = __webpack_public_path__ + \"static/media/sound_school_bell_start.94b2e286.mp3\";","module.exports = __webpack_public_path__ + \"static/media/sound_school_bell_end.8240d3cb.mp3\";"],"sourceRoot":""}