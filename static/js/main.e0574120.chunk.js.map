{"version":3,"sources":["App.tsx","reportWebVitals.js","index.js","audio/sound_school_bell_start.mp3","audio/sound_school_bell_end.mp3"],"names":["parseTimeToInt","timeArray","parseIntToTime","timeInt","Math","floor","App","_useState","useState","Date","_useState2","_slicedToArray","time","setTime","_useState3","start","end","_useState4","bellTimes","setBellTimes","_useState5","_useState6","isStarted","setIsStarted","timeRegExp","useEffect","setTimeout","forEach","e","parsed","getHours","getMinutes","getSeconds","Audio","soundStart","play","catch","console","error","soundEnd","AddTimeButton","_ref","soundType","React","onClick","input","prompt","test","_bellTimes","_objectSpread","inputTime","split","map","Number","push","cycleInput","cycle","isNaN","i","sort","a","b","alert","TimeText","_ref2","result","key","index","splice","concat","toString","padStart","id","className","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","createElement","StrictMode","module","exports","p"],"mappings":"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","file":"static/js/main.e0574120.chunk.js","sourcesContent":["import * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport './App.css';\n\nimport soundStart from './audio/sound_school_bell_start.mp3';\nimport soundEnd from './audio/sound_school_bell_end.mp3';\n\ntype bellTimesProps = [\n  bellTimes: { 'start': number[], 'end': number[] },\n  setBellTimes: React.Dispatch<React.SetStateAction<{ 'start': number[], 'end': number[] }>>\n];\n\ntype TimeElementProps = {\n  soundType: 'start' | 'end'\n};\n\nconst parseTimeToInt = (timeArray: number[]): number => {\n  return timeArray[0] * 3600 + timeArray[1] * 60 + timeArray[2];\n}\n\nconst parseIntToTime = (timeInt: number): number[] => {\n  const hour = Math.floor(timeInt / 3600);\n  const minute = Math.floor((timeInt % 3600) / 60);\n  const second = (timeInt % 3600) % 60;\n  return [hour, minute, second];\n}\n\nfunction App() {\n  const [time, setTime] = useState(new Date());\n  const [bellTimes, setBellTimes]: bellTimesProps = useState({ 'start': [0], 'end': [0] });\n  const [isStarted, setIsStarted] = useState(false);\n\n  const timeRegExp = /\\d\\d\\:\\d\\d\\:\\d\\d/g;\n\n  useEffect(() => {\n    setTimeout(() => {\n      setTime(new Date());\n    }, 1000);\n\n    bellTimes.start.forEach(e => {\n      const parsed = parseIntToTime(e);\n      if (time.getHours() == parsed[0] && time.getMinutes() == parsed[1] && time.getSeconds() == parsed[2]) {\n        setIsStarted(true);\n        new Audio(soundStart).play().catch(e => console.error(e));\n      }\n    });\n\n    bellTimes.end.forEach(e => {\n      const parsed = parseIntToTime(e);\n      if (time.getHours() == parsed[0] && time.getMinutes() == parsed[1] && time.getSeconds() == parsed[2]) {\n        setIsStarted(false);\n        new Audio(soundEnd).play().catch(e => console.error(e));\n      }\n    });\n  }, [time]);\n\n  const AddTimeButton = ({ soundType }: TimeElementProps) => {\n    function onClick() {\n      let input = prompt('HH:MM:SS 형식으로 시각을 적어주세요.');\n      if (input != null) {\n        if (timeRegExp.test(input)) {\n          let _bellTimes = {...bellTimes};\n          let inputTime = parseTimeToInt(input.split(':').map(e => Number(e)));\n          _bellTimes[soundType].push(inputTime);\n          if (soundType == 'start') {\n            let cycleInput = prompt('사이클 횟수를 적어주세요.\\n입력한 횟수만큼 공부 50분, 휴식 10분 사이클을 반복합니다.');\n            if (cycleInput != null) {\n              let cycle: number = Number(cycleInput);\n              if (!isNaN(cycle)) {\n                for (let i = 1; i <= cycle; i++) {\n                  if (i != 1) _bellTimes.start.push(inputTime + (i - 1) * 60 * 60);\n                  _bellTimes.end.push(inputTime + (i - 1) * 60 * 60 + 50 * 60);\n                }\n                _bellTimes.end.sort((a, b) => a - b);\n              }\n            }\n          }\n          _bellTimes[soundType].sort((a, b) => a - b);\n          setBellTimes(_bellTimes);\n        } else {\n          alert('정확한 형식으로 입력해주세요!');\n        }\n      }\n    }\n  \n    return (\n      <button onClick={onClick}> {soundType == 'start'? '시작': '종료'} 시간 추가하기 </button>\n    );\n  }\n\n  const TimeText = ({ soundType }: TimeElementProps) => {\n    const onClick = (index: number) => {\n      const input = prompt('HH:MM:SS 형식으로 수정할 시각을 입력해주세요.\\nX를 입력하면 삭제합니다.');\n      if (input != null) {\n        if (input == 'X') {\n          let _bellTimes = {...bellTimes};\n          _bellTimes[soundType].splice(index, 1);\n          setBellTimes(_bellTimes);\n        } else if (timeRegExp.test(input)) {\n          let _bellTimes = {...bellTimes};\n          _bellTimes[soundType][index] = parseTimeToInt(input.split(':').map(e => Number(e)));\n          _bellTimes[soundType].sort((a, b) => a - b);\n          setBellTimes(_bellTimes);\n        } else {\n          alert('정확한 형식으로 입력해주세요!');\n        }\n      }\n    }\n    let result = bellTimes[soundType].map((e, i) => {\n      const parsed = parseIntToTime(e);\n      return <li key={i} onClick={() => onClick(i)}>{`${parsed[0].toString().padStart(2, '0')}시 ${parsed[1].toString().padStart(2, '0')}분 ${parsed[2].toString().padStart(2, '0')}초`}</li>\n    });\n    return (\n      <>\n        {soundType == 'start'? '시작': '종료'} 종이 울리는 시간\n        <ul>\n          {result}\n        </ul>\n      </>\n    )\n  }\n\n  return (\n    <center>\n      <h1>학교종</h1>\n      <span id={isStarted? 'start' : 'end'}>\n        현재 시간\n        <h1>{time.getHours().toString().padStart(2, '0')}:{time.getMinutes().toString().padStart(2, '0')}:{time.getSeconds().toString().padStart(2, '0')}</h1>\n      </span><br />\n      <div className=\"time-table\">\n        <div className=\"start-table\">\n          <AddTimeButton soundType='start'/><br /><br />\n          <TimeText soundType='start'/>\n        </div>\n        <div className=\"end-table\">\n          <AddTimeButton soundType='end'/><br /><br />\n          <TimeText soundType='end'/>\n        </div>\n      </div>\n    </center>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports = __webpack_public_path__ + \"static/media/sound_school_bell_start.94b2e286.mp3\";","module.exports = __webpack_public_path__ + \"static/media/sound_school_bell_end.8240d3cb.mp3\";"],"sourceRoot":""}