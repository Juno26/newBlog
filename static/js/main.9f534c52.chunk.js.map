{"version":3,"sources":["audio/sound_school_bell_start.mp3","audio/sound_school_bell_end.mp3","App.tsx","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","App","_useState","useState","Date","_useState2","_slicedToArray","time","setTime","_useState3","start","end","_useState4","bellTimes","setBellTimes","timeRegExp","useEffect","setTimeout","forEach","e","getHours","getMinutes","getSeconds","Audio","soundStart","play","catch","console","error","soundEnd","AddTimeButton","_ref","soundType","React","onClick","input","prompt","test","push","split","map","Number","alert","TimeText","_ref2","result","concat","toString","padStart","join","className","reportWebVitals","onPerfEntry","Function","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","createElement","StrictMode"],"mappings":"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","file":"static/js/main.9f534c52.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sound_school_bell_start.94b2e286.mp3\";","module.exports = __webpack_public_path__ + \"static/media/sound_school_bell_end.8240d3cb.mp3\";","import * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport './App.css';\n\nimport soundStart from './audio/sound_school_bell_start.mp3';\nimport soundEnd from './audio/sound_school_bell_end.mp3';\n\ntype bellTimesProps = [\n  bellTimes: { 'start': number[][], 'end': number[][] },\n  setBellTimes: React.Dispatch<React.SetStateAction<{ 'start': number[][], 'end': number[][] }>>\n];\n\ntype TimeElementProps = {\n  soundType: 'start' | 'end'\n};\n\nfunction App() {\n  const [time, setTime] = useState(new Date());\n\n  const [bellTimes, setBellTimes]: bellTimesProps = useState({ 'start': [[8, 40, 0]], 'end': [[16, 37, 0]] });\n  const timeRegExp = /\\d\\d\\:\\d\\d\\:\\d\\d/g;\n\n  useEffect(() => {\n    setTimeout(() => {\n      setTime(new Date());\n    }, 1000);\n\n    bellTimes.start.forEach(e => {\n      if (time.getHours() == e[0] && time.getMinutes() == e[1] && time.getSeconds() == e[2]) {\n        new Audio(soundStart).play().catch(e => console.error(e));\n      }\n    });\n\n    bellTimes.end.forEach(e => {\n      if (time.getHours() == e[0] && time.getMinutes() == e[1] && time.getSeconds() == e[2]) {\n        new Audio(soundEnd).play().catch(e => console.error(e));\n      }\n    });\n  }, [time]);\n\n  const AddTimeButton = ({ soundType }: TimeElementProps) => {\n    function onClick() {\n      const input = prompt('HH:MM:SS 형식으로 시각을 적어주세요.');\n      if (input != null && timeRegExp.test(input)) {\n        bellTimes[soundType].push(input.split(':').map(e => Number(e)));\n        setBellTimes(bellTimes);\n      } else {\n        alert('정확한 형식으로 입력해주세요!');\n      }\n    }\n  \n    return (\n      <button onClick={onClick}> {soundType == 'start'? '시작': '종료'} 시간 추가하기 </button>\n    );\n  }\n\n  const TimeText = ({ soundType }: TimeElementProps) => {\n    let result = bellTimes[soundType].map(e => `${e[0].toString().padStart(2, '0')}시 ${e[1].toString().padStart(2, '0')}분 ${e[2].toString().padStart(2, '0')}초`).join('\\n');\n    return (\n      <p>\n        {soundType == 'start'? '시작': '종료'} 종이 울리는 시간<br /><br />\n        {result}\n      </p>\n    )\n  }\n\n  return (\n    <center>\n      <h1>학교종이 땡땡땡 어서 모이자</h1>\n      <h1>{time.getHours().toString().padStart(2, '0')}:{time.getMinutes().toString().padStart(2, '0')}:{time.getSeconds().toString().padStart(2, '0')}</h1>\n      <div className=\"time-table\">\n        <div className=\"start-table\">\n          <AddTimeButton soundType='start'/>\n          <TimeText soundType='start'/>\n        </div>\n        <div className=\"end-table\">\n          <AddTimeButton soundType='end'/>\n          <TimeText soundType='end'/>\n        </div>\n      </div>\n    </center>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}